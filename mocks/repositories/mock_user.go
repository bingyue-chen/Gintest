// Code generated by MockGen. DO NOT EDIT.
// Source: src/repositories/user.go

// Package repositories is a generated GoMock package.
package repositories

import (
	entities "Gintest/src/entities"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserRepositoryContract is a mock of UserRepositoryContract interface
type MockUserRepositoryContract struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryContractMockRecorder
}

// MockUserRepositoryContractMockRecorder is the mock recorder for MockUserRepositoryContract
type MockUserRepositoryContractMockRecorder struct {
	mock *MockUserRepositoryContract
}

// NewMockUserRepositoryContract creates a new mock instance
func NewMockUserRepositoryContract(ctrl *gomock.Controller) *MockUserRepositoryContract {
	mock := &MockUserRepositoryContract{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryContractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserRepositoryContract) EXPECT() *MockUserRepositoryContractMockRecorder {
	return m.recorder
}

// Find mocks base method
func (m *MockUserRepositoryContract) Find(arg0 int64) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockUserRepositoryContractMockRecorder) Find(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockUserRepositoryContract)(nil).Find), arg0)
}

// FindByEmail mocks base method
func (m *MockUserRepositoryContract) FindByEmail(arg0 string) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", arg0)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail
func (mr *MockUserRepositoryContractMockRecorder) FindByEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockUserRepositoryContract)(nil).FindByEmail), arg0)
}

// Create mocks base method
func (m *MockUserRepositoryContract) Create(arg0 *entities.User) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockUserRepositoryContractMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepositoryContract)(nil).Create), arg0)
}

// Update mocks base method
func (m *MockUserRepositoryContract) Update(arg0 *entities.User, arg1 map[string]interface{}) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockUserRepositoryContractMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserRepositoryContract)(nil).Update), arg0, arg1)
}
